

"""
AGREEMENT MODEL 
"""
type AgreementSignatory  {
	id: ID!
	agreement: Agreement! @hasInverse(field:signatories) 
	projectUser: ProjectUser @hasInverse(field:agreements) 
	signature: String 
	date: DateTime
	payments: [Payment] 
}

type Agreement  {
	id: ID! 
	signatories: [AgreementSignatory] 
	contributorCreditClass: ContributorCreditClass @hasInverse(field:agreement) 
	agreementThreadID: String 
	title: String! 
	text: String 
	creationDate: DateTime!
	lastUpdate: DateTime 
	type: AgreementType
}

enum AgreementType {
		PROJECT_RELATIONSHIP
		CONTRIBUTOR_CREDIT
}

type Payment  {
	id: ID! 
	amount: Int64! 
	currency: Currency! 
	date: DateTime!
	note: String
}

type Currency  {
	code: CurrencyCode! 
	contributorCreditClass: ContributorCreditClass 
}

"""
CAMPAIGN MODEL 
"""
type Campaign  {
	name: String! 
	project: Project! @hasInverse(field:campaigns) 
	logo: String 
	website: String 
}

enum ContributorCreditClassTriggerType {
	FUNDING_RAISED
	REVENUE_EARNED
	SALE
}

type ContributorCreditClassTrigger  {
	name: String 
	type: ContributorCreditClassTriggerType! 
	amount: Int64 
	currency: String 
	primary: Boolean 
}

type ContributorCreditClass {
	id: ID! 
	name: String! 
	cryptoAddress: CryptoAddress!
	type: SmartContractType!
	agreement: Agreement! @hasInverse(field:contributorCreditClass) 
	description: String 
	triggerShortDescription: String
	triggers: [ContributorCreditClassTrigger] 
	backingCurrency: CurrencyCode 
	currentFunding: Float
}

type SmartContractUnestablished {
	id: ID!
	cryptoAddress: CryptoAddress!
	type: SmartContractType!
	project: Project @hasInverse(field:unestablishedSmartContracts)
	owner: User @hasInverse(field:unestablishedSmartContracts)
	used: Boolean
}

enum SmartContractType {
	C2
	C3
}

enum CryptoAddressProtocol {
	ETH
	BTC
	ADA
	MATIC
}

enum CryptoAddressType {
	WALLET
	CONTRACT
}

type CryptoAddress  {
	id: ID!
	name: String 
	address: String! @id
	description: String
	protocol: CryptoAddressProtocol 
	chainId: Int
	type: CryptoAddressType 
	public: Boolean @search
	user: User @hasInverse(field:walletAddresses) 
	project: Project @hasInverse(field:walletAddresses) 
}

"""
ORGANIZATION MODEL 
"""
type Organization  {
	id: ID! 
	displayName: String @search(by:[fulltext]) 
	logo: String 
	website: String 
	fullLegalName: String! @search(by:[fulltext]) 
	address: String 
	country: String 
	jurisdiction: String 
	type: String 
	projects: [Project] @hasInverse(field:organization) 
	users: [OrganizationUser] @hasInverse(field:organization) 
}

type GeoAddress {
	id: ID!
	line1: String!
	line2: String
	line3: String
	city: String!
	stateProvence: String
	postalCode: String
	country: String
}

enum OrganizationPermissionType {
	ADMIN
}

type OrganizationUser  {
	organization: Organization! @hasInverse(field:users)
	user: User! @hasInverse(field:organizations) 
	permission: OrganizationPermissionType 
}

enum ProjectInfoBackerType {
	VENTURE_CAPITALIST
	LAW_FIRM
	ANGEL_INVESTOR
	ACCELERATOR 
	INCUBATOR
	BANK
	BUSINESS
	STUDIO
	AGENCY
}

type ProjectInfoBacker  {
	name: String! @search(by:[fulltext]) 
	url: String 
	type: ProjectInfoBackerType 
	logo: String
	organizations: [Organization]
	financialInvestments: [ProjectUserFinancialInvestment]
}

enum ProjectInfoCategory {
  BUSINESS_SERVICES
  GAMES
  ARTS_CULTURE
  POLITICS_ACTIVISM
  CONSUMER_SOFTWARE
  BUSINESS_SOFTWARE
  HEALTH_BIOTECH
  MUSIC_FILM_ENTERTAINMENT
  DEVELOPER_TOOLS
  SCIENCE_EDUCATION
  MACHINE_LEARNING_DATA
  WRITING_JOURNALISM
		CONSUMER_SERVICES
}

enum ProjectInfoDocumentType {
	GOOGLE_DRIVE
	GOOGLE_DOC
	GOOGLE_SHEET
	GOOGLE_SLIDE
	WORD_DOC
	EXCEL
	POWERPOINT
	GITHUB
	PDF
	NOTION
	OTHER
}

type ProjectInfoDocument  {
	id: ID!
	type: ProjectInfoDocumentType 
	title: String 
	url: String
	hidden: Boolean
}

enum ProjectInfoIntention {
	BUILDING_A_BUSINESS
	BUILDING_A_BETTER_WORLD
	CREATING_A_GAME
	CREATING_ART
	JUST_FOR_FUN
}

enum ProjectInfoProgress {
	JUST_AN_IDEA
	SOME_STUFF_BUILT
	MVP_IS_LIVE
	ON_THE_MARKET
	INVESTOR_FUNDED
	SIGNIFICANT_REVENUE
}

type ProjectInfoSharing {
	image: String
}

enum ProjectInfoSpecialGameGenre {
	ACTION
	ADVENTURE
	RPG
	FPS
}

enum ProjectInfoSpecialFilmLength {
	SHORT
	FEATURE
}

type ProjectInfoSpecialFilm  {
	length: ProjectInfoSpecialFilmLength 
	genre: String 
}

type ProjectInfoSpecialGame  {
	genre: ProjectInfoSpecialGameGenre 
	tagline: String 
	engine: String 
	monitization: String 
}

type ProjectInfoSpecial  {
	game: ProjectInfoSpecialGame 
	film: ProjectInfoSpecialFilm 
}

type ProjectInfoTimeGoals  {
	now: String 
	oneYear: String 
	threeYears: String 
}

type ProjectInfo  {
	id: ID!
	creationDate: DateTime! 
	category: ProjectInfoCategory 
	logo: String 
	sharing: ProjectInfoSharing
	brandColor: String 
	lightBrand: Boolean 
	headerImg: String 
	progress: ProjectInfoProgress 
	intention: ProjectInfoIntention 
	shortDescription: String 
	special: ProjectInfoSpecial 
	generalDescription: String 
	problem: String 
	solution: String 
	gtmStrategy: String 
	investmentDescription: String
	linkedAccounts: [LinkedAccount] @hasInverse(field:project) 
	documents: [ProjectInfoDocument] 
	mission: String 
	vision: String 
	targetMarket: String 
	timeGoals: ProjectInfoTimeGoals 
	backers: [ProjectInfoBacker] 
	website: String 
	pitchDeck: String 
	videoURL: String 
	languages: [String] 
	locations: [String] 
	project: Project! @hasInverse(field:info) 
}

enum ProjectOpportunitiesSeeking {
	CO_FOUNDER
	CONTRIBUTORS
	INVESTMENT
}

type ProjectOpportunitiesJob  {
	id: ID!
	title: String! @search(by:[fulltext]) 
	icon: String 
	description: String 
	expertise: [String] @search(by:[exact]) 
	compensation: String 
	archived: Boolean
}

type ProjectOpportunitiesNeed  {
	id: ID!
	name: String 
	value: Int @dgraph(pred: "ProjectOpportunitiesNeed.severity")
	fill: String 
}

type ProjectTeam  {
	culture: String 
	teamTalents: String 
	teamFit: String 
}

type Project  {
	id: ID! 
	name: String @search(by:[fulltext]) 
	slug: String! @id
	lastUpdate: DateTime 
	campaigns: [Campaign] 
	projectUsers: [ProjectUser] @hasInverse(field:project) 
	info: ProjectInfo 
	walletAddresses: [CryptoAddress] 
	team: ProjectTeam 
 organization: Organization! @hasInverse(field:projects)
	seeking: ProjectOpportunitiesSeeking 
	needSummary: String 
	needs: [ProjectOpportunitiesNeed] 
	jobs: [ProjectOpportunitiesJob]
	unestablishedSmartContracts: [SmartContractUnestablished] @hasInverse(field:project)
}

"""
PROJECTUSER MODEL 
"""
type ProjectUserCompensationPackage  {
	credits: Int64 
	shares: Int64 
}

enum FinancialInvestmentType {
	EQUITY_PURCHASE
	LOAN
}

type ProjectUserFinancialInvestment  {
	id: ID!
	amount: Int64! 
	currency: CurrencyCode! 
	date: DateTime!
	type: FinancialInvestmentType
}

enum ProjectUserRole {
	CREATOR
	CONTRIBUTOR
	ADVISOR
	INVESTOR
	SUPPORTER
}

type ProjectUserTimeCommitmentByDay  {
	sun: Int 
	mon: Int 
	tue: Int 
	wed: Int 
	thu: Int 
	fri: Int 
	sat: Int 
}

type ProjectUserTimeCommitment  {
	total: Int 
	byDay: ProjectUserTimeCommitmentByDay 
}

type ProjectUser  {
	id: ID! 
	user: User! @hasInverse(field:projects) 
	project: Project! @hasInverse(field:projectUsers) 
	agreements: [AgreementSignatory] @hasInverse(field:projectUser) 
	title: String! 
	timeCommitment: ProjectUserTimeCommitment 
	financialInvestments: [ProjectUserFinancialInvestment] 
	compensationPackage: ProjectUserCompensationPackage 
	projectLove: String 
	roles: [ProjectUserRole!] 
	lastUpdate: DateTime!
	archived: Boolean
}

"""
USER MODEL 
"""

type EmailAddress {
	address: String! @id
	name: String
	description: String
	public: Boolean @search
	user: User @hasInverse(field:emailAddresses)
}

enum LinkedAccountType  {
	LINKEDIN
	FACEBOOK
	TWITTER
	INSTAGRAM
	DISCORD
	TELEGRAM
	MEDIUM
	MIRROR
	SUBSTACK
	YOUTUBE
	SOUNDCLOUD
	DRIBBBLE
	GITHUB
	OTHER
}

type LinkedAccount  {
	id: ID!
	username: String! @search(by:[term]) 
	type: LinkedAccountType 
	verified: Boolean
	hidden: Boolean
	user: User @hasInverse(field:linkedAccounts) 
	project: ProjectInfo @hasInverse(field:linkedAccounts) 
}

type User  {
	id: ID! 
	uuid: String! @id
	emailAddresses: [EmailAddress!] @hasInverse(field:user)
	displayName: String @search(by:[term]) 
	fullName: String! @search(by:[term]) 
	profileImage: String 
	biography: String 
	linkedAccounts: [LinkedAccount] @hasInverse(field:user) 
	public: Boolean @search
	expertise: [String] 
	interests: [String] 
	projects: [ProjectUser] 
	walletAddresses: [CryptoAddress] 
	organizations: [OrganizationUser!]
	unestablishedSmartContracts: [SmartContractUnestablished] @hasInverse(field:owner)
	creationDate: DateTime
}

"""
BIG LISTS
"""

enum CurrencyCode {
	CC
	USD
	CAD
	EUR
	GBP
	BTC
	ETH
	ADA
	MATIC
	USDC
	DAI
	USDC_TEST_
	DAI_TEST_
	PoS_USDC
	PoS_DAI
	USDC_MATIC_TEST_
	DAI_MATIC_TEST_
}

# Dgraph.Authorization {"Header":"X-Auth-Token","Namespace":"https://dgraph.io/jwt/claims","JWKURL":"https://www.googleapis.com/service_accounts/v1/jwk/securetoken@system.gserviceaccount.com","Audience":["walletbook-f549a"]}
