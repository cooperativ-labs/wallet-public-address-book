
type Currency  {
	code: CurrencyCode! 
}

"""
CAMPAIGN MODEL 
"""
type Campaign  {
	name: String! 
	logo: String 
	website: String 
}

enum CryptoAddressProtocol {
	ETH
	BTC
	ADA
	MATIC
}

enum CryptoAddressType {
	WALLET
	CONTRACT
}

type CryptoAddress @auth (
  add: { rule:"""
				query($UUID: String!) {
					queryCryptoAddress { 
						user(filter: { uuid: { eq: $UUID }}) {
													__typename
													id
									}
							}
					}"""} 
		update: { rule: """
				query($UUID: String!) {
						queryCryptoAddress { 
							user ( filter: {uuid: { eq: $UUID }}) {
														__typename
										}
							}
					}"""} 
		delete: { rule: """
				query($UUID: String!) {
						queryCryptoAddress { 
							user ( filter: {uuid: { eq: $UUID }}) {
														__typename
										}
							}
					}"""}
)  {
	id: ID!
	name: String 
	address: String! @id
	description: String
	protocol: CryptoAddressProtocol 
	chainId: Int
	type: CryptoAddressType 
	public: Boolean @search
	user: User @hasInverse(field:walletAddresses) 
}

"""
ORGANIZATION MODEL 
"""
type Organization {
	id: ID! 
	displayName: String @search(by:[fulltext]) 
	logo: String 
	website: String 
	fullLegalName: String! @search(by:[fulltext]) 
	address: String 
	country: String 
	jurisdiction: String 
	type: String 
	users: [OrganizationUser] @hasInverse(field:organization) 
}

type GeoAddress {
	id: ID!
	line1: String!
	line2: String
	line3: String
	city: String!
	stateProvence: String
	postalCode: String
	country: String
}

enum OrganizationPermissionType {
	ADMIN
}

type OrganizationUser  {
	organization: Organization! @hasInverse(field:users)
	user: User! @hasInverse(field:organizations) 
	permission: OrganizationPermissionType 
}


"""
USER MODEL 
"""

type EmailAddress @auth (
  add: { rule:"""
				query($UUID: String!) {
					queryEmailAddress { 
						user(filter: { uuid: { eq: $UUID }}) {
													__typename
													id
									}
							}
					}"""} 
		update: { rule:"""
				query($UUID: String!) {
					queryEmailAddress { 
						user(filter: { uuid: { eq: $UUID }}) {
													__typename
													id
									}
							}
					}"""} 
		delete: { rule: """
				query($UUID: String!) {
						queryEmailAddress { 
							user ( filter: {uuid: { eq: $UUID }}) {
														__typename
										}
							}
					}""" 
		 } 
) {
	address: String! @id
	name: String
	description: String
	public: Boolean @search
	user: User @hasInverse(field:emailAddresses)
}

enum LinkedAccountType  {
	LINKEDIN
	FACEBOOK
	TWITTER
	INSTAGRAM
	DISCORD
	TELEGRAM
	MEDIUM
	MIRROR
	SUBSTACK
	YOUTUBE
	SOUNDCLOUD
	DRIBBBLE
	GITHUB
	OTHER
}

type LinkedAccount  {
	id: ID!
	username: String! @search(by:[term]) 
	type: LinkedAccountType 
	verified: Boolean
	hidden: Boolean
	user: User @hasInverse(field:linkedAccounts) 
}

type User  @auth (
	 update: { rule: """
				query($UUID: String!) { 
						queryUser(filter: { uuid: { eq: $UUID } }) { 
							uuid 
						}
					}"""
				}
			delete: { rule: """
				query($UUID: String!) { 
						queryUser(filter: { uuid: { eq: $UUID } }) { 
							uuid 
						}
					}"""
				}
) {
	id: ID! 
	uuid: String! @id
	emailAddresses: [EmailAddress!] @hasInverse(field:user)
	displayName: String @search(by:[term]) 
	fullName: String! @search(by:[term]) 
	profileImage: String 
	biography: String 
	linkedAccounts: [LinkedAccount] @hasInverse(field:user) 
	public: Boolean @search
	expertise: [String] 
	interests: [String] 
	walletAddresses: [CryptoAddress] 
	organizations: [OrganizationUser!]
	creationDate: DateTime
}

"""
BIG LISTS
"""

enum CurrencyCode {
	CC
	USD
	CAD
	EUR
	GBP
	BTC
	ETH
	ADA
	MATIC
	USDC
	DAI
	USDC_TEST_
	DAI_TEST_
	PoS_USDC
	PoS_DAI
	USDC_MATIC_TEST_
	DAI_MATIC_TEST_
}

# Dgraph.Authorization {"Header":"X-Auth-Token","Namespace":"https://dgraph.io/jwt/claims","JWKURL":"https://www.googleapis.com/service_accounts/v1/jwk/securetoken@system.gserviceaccount.com","Audience":["walletbook-f549a"]}
